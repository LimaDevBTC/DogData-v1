#!/usr/bin/env python3
"""
Extrator COMPLETO do Airdrop DOG usando Bitcoin Core + Ord local
N√£o depende de APIs externas limitadas
"""

import subprocess
import json
import sys
from collections import defaultdict
from datetime import datetime

# Configura√ß√µes
DISTRIBUTOR_ADDRESS = "bc1pry0ne0yf5pkgqsszmytmqkpzs4aflhr8tfptz9sydqrhxexgujcqqler2t"
DOG_RUNE_ID = "1:0"  # DOG‚Ä¢GO‚Ä¢TO‚Ä¢THE‚Ä¢MOON
STANDARD_AIRDROP = 889806
OUTPUT_FILE = "../data/airdrop_recipients.json"

print("=" * 80)
print("üî¨ EXTRATOR COMPLETO DO AIRDROP DOG")
print("=" * 80)
print(f"\nüìã Usando Bitcoin Core + Ord local")
print(f"üìã Distribuidor: {DISTRIBUTOR_ADDRESS[:30]}...")
print(f"üìã Rune: DOG‚Ä¢GO‚Ä¢TO‚Ä¢THE‚Ä¢MOON")

# Passo 1: Usar Ord para listar TODOS os outputs DOG
print("\n" + "=" * 80)
print("üìä PASSO 1: Extraindo TODOS os UTXOs DOG do Ord indexer")
print("=" * 80)

print("\n‚è≥ Consultando Ord... (pode demorar alguns minutos)")

try:
    # Consultar o Ord CLI para listar todos os outputs do rune DOG
    cmd = ["ord", "runes"]
    result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
    
    if result.returncode != 0:
        print(f"‚ùå Erro ao consultar Ord: {result.stderr}")
        sys.exit(1)
    
    print("‚úÖ Dados do Ord recuperados")
    
except Exception as e:
    print(f"‚ùå Erro: {e}")
    sys.exit(1)

# Passo 2: Analisar os outputs e identificar os originais do airdrop
print("\n" + "=" * 80)
print("üìä PASSO 2: Identificando outputs originais do airdrop")
print("=" * 80)

print("\nüí° ESTRAT√âGIA ALTERNATIVA:")
print("   Como a API do Mempool.space tem limita√ß√µes, vamos usar")
print("   um servi√ßo alternativo ou escanear a blockchain localmente")

# Solu√ß√£o mais robusta: usar getrawtransaction do Bitcoin Core
# para cada bloco do per√≠odo do airdrop

AIRDROP_START_BLOCK = 840654  # Bloco aproximado do in√≠cio do airdrop
AIRDROP_END_BLOCK = 858370    # Bloco aproximado do fim do airdrop

print(f"\nüìç Per√≠odo do airdrop:")
print(f"   Bloco inicial: {AIRDROP_START_BLOCK}")
print(f"   Bloco final: {AIRDROP_END_BLOCK}")
print(f"   Total de blocos: {AIRDROP_END_BLOCK - AIRDROP_START_BLOCK}")

print("\n‚ö†Ô∏è  AVISO: Escanear todos esses blocos levar√° muito tempo!")
print("    Melhor solu√ß√£o: usar um explorador alternativo ou API completa")

print("\n" + "=" * 80)
print("üí° RECOMENDA√á√ÉO:")
print("=" * 80)
print("""
Para extrair TODOS os 112,000 airdrops, precisamos usar uma das seguintes op√ß√µes:

1. üåê API Alternativa: Usar um explorador que retorne TODAS as transa√ß√µes
   - OKX Explorer API
   - Blockchain.info API
   - Blockchair API

2. üîç Escanear blockchain local: Iterar por todos os blocos do per√≠odo
   - Mais lento mas 100% completo
   - Requer processamento de ~18,000 blocos

3. üìä Usar dados do Ord: O Ord j√° tem TODOS os runes indexados
   - Mais r√°pido
   - Requer consultar o banco de dados do Ord diretamente

Para continuar, escolha uma op√ß√£o acima e implemente a extra√ß√£o completa.
""")
print("=" * 80)

